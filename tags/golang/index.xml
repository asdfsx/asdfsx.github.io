<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on asdfsx</title>
    <link>https://asdfsx.github.io/tags/golang/index.xml</link>
    <description>Recent content in Golang on asdfsx</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="https://asdfsx.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang的类型</title>
      <link>https://asdfsx.github.io/post/golang/Golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 25 Feb 2017 20:15:52 +0800</pubDate>
      
      <guid>https://asdfsx.github.io/post/golang/Golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>

&lt;p&gt;两个月前给自己挖的坑，就这么算是填上了吧。其实最重要的还是多看代码、多写代码。本文参考 Golang Specification 和 The way to go。&lt;/p&gt;

&lt;h1 id=&#34;常量&#34;&gt;常量&lt;/h1&gt;

&lt;h3 id=&#34;常量声明&#34;&gt;常量声明&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;const Pi float64 = 3.14159265358979323846
const zero = 0.0         // untyped floating-point constant
const (
	size int64 = 1024
	eof        = -1  // untyped integer constant
)
const a, b, c = 3, 4, &amp;quot;foo&amp;quot;  // a = 3, b = 4, c = &amp;quot;foo&amp;quot;, untyped integer and string constants
const u, v float32 = 0, 3    // u = 0.0, v = 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;iota&#34;&gt;Iota&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Partyday
	numberOfDays  // this constant is not exported
)

const ( // iota is reset to 0
	a = 1 &amp;lt;&amp;lt; iota  // a == 1
	b = 1 &amp;lt;&amp;lt; iota  // b == 2
	c = 3          // c == 3  (iota is not used but still incremented)
	d = 1 &amp;lt;&amp;lt; iota  // d == 8  (注意这里的 &amp;lt;&amp;lt; 是在进行位移运算)
)

const ( // iota is reset to 0
	c0 = iota  // c0 == 0
	c1 = iota  // c1 == 1
	c2 = iota  // c2 == 2
)



const ( // iota is reset to 0
	u         = iota * 42  // u == 0     (untyped integer constant)
	v float64 = iota * 42  // v == 42.0  (float64 constant)
	w         = iota * 42  // w == 84    (untyped integer constant)
)

const x = iota  // x == 0  (iota has been reset)
const y = iota  // y == 0  (iota has been reset)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在同一个表达式中，iota 的值相同，因为只有在一个常量声明表达式结束之后，它才会增加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const (
	bit0, mask0 = 1 &amp;lt;&amp;lt; iota, 1&amp;lt;&amp;lt;iota - 1  // bit0 == 1, mask0 == 0
	bit1, mask1                           // bit1 == 2, mask1 == 1
	_, _                                  // skips iota == 2
	bit3, mask3                           // bit3 == 8, mask3 == 7
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;变量&#34;&gt;变量&lt;/h1&gt;

&lt;p&gt;变量就是一个用来保存值的存储空间。其中能存放的值与变量的类型一致。&lt;/p&gt;

&lt;p&gt;在函数声明时可以为函数参数和返回值定义变量，这会为已命名的变量预留存储空间。调用内建函数&lt;code&gt;new&lt;/code&gt;或者使用复合类型的地址可以在运行时获得存储空间。这样的匿名变量是通过指针直接或间接使用的。&lt;/p&gt;

&lt;p&gt;结构化类型的变量，如数组、切片和结构体，都包含多个元素或者字段，它们的地址都是独立的。每个元素就像变量一样。&lt;/p&gt;

&lt;p&gt;变量的静态类型在声明的时候定义，也可以通过一下的方式提供：通过调用&lt;code&gt;new&lt;/code&gt;或者复合字面量，或者结构化类型中元素的类型。接口类型的变量同样也有独特的动态类型，就是在运行时分配给变量的值的类型（预定义的标识符&lt;code&gt;nil&lt;/code&gt;除外,因为它没有类型）。动态类型可能会在计算时发生变化，但是存储在接口变量中的值总是可以赋给变量的静态类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x interface{}  // x is nil and has static type interface{}
var v *T           // v has value nil, static type *T
x = 42             // x has value 42 and dynamic type int
x = v              // x has value (*T)(nil) and dynamic type *T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在表达式中，变量的值可以通过变量来获得；它只是最后一次赋予变量的值。如果一个变量还没有被赋值，它的值就是所属类型的&lt;code&gt;0&lt;/code&gt;值。&lt;/p&gt;

&lt;h3 id=&#34;变量声明&#34;&gt;变量声明&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var i int
var U, V, W float64
var k = 0
var x, y float32 = -1, -2
var (
	i       int
	u, v, s = 2.0, 3.0, &amp;quot;bar&amp;quot;
)
var re, im = complexSqrt(-1)
var _, found = entries[name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现，变量类型跑到了变量名后边。&lt;/p&gt;

&lt;h3 id=&#34;简短变量声明&#34;&gt;简短变量声明&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;函数内部&lt;/strong&gt; 还有一种简短的声明方式(注意是在 &lt;strong&gt;函数内部&lt;/strong&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() returns two values
_, y, _ := coord(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不需要指定类型，golang可以自己推断。&lt;/p&gt;

&lt;p&gt;另外就是，使用这种声明方式，可能会遇到重复声明变量的问题。对此官方文档有如下说明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unlike regular variable declarations, a short variable declaration may redeclare variables provided they were originally declared earlier in the same block with the same type, and at least one of the non-blank variables is new. As a consequence, redeclaration can only appear in a multi-variable short declaration. Redeclaration does not introduce a new variable; it just assigns a new value to the original.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // redeclares offset
a, a := 1, 2                              // illegal: double declaration of a or no new variable if a was declared elsewhere

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单说，只要里边有一个变量是之前没有用过的，就没有问题。&lt;/p&gt;

&lt;p&gt;这种声明方式也可以使用在 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;语句的初始化部分，生成的变量只能在这几种语句的内部使用（也就是作用域范围内）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if test, ok := map[string]string{&amp;quot;test&amp;quot;:&amp;quot;test&amp;quot;}[&amp;quot;test&amp;quot;]; ok {
	fmt.Println(test)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;类型&#34;&gt;类型&lt;/h1&gt;

&lt;p&gt;一种类型决定一个值的可能的取值范围以及能对这个值所支持的操作。类型有可能是已命名的(named)也可能是未命名的（unnamed）。已命名的类型会有类型名称；未命名点类型可以用&lt;code&gt;type&lt;/code&gt;来定义，用已有的类型来组成新的类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type      = TypeName | TypeLit | &amp;quot;(&amp;quot; Type &amp;quot;)&amp;quot; .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
	    SliceType | MapType | ChannelType .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;已命名的实例：布尔、数字、字符串都是预定义的。复合类型&amp;ndash;数组、结构体、指针、函数、接口、切片、字典、管道类型&amp;ndash;可能需要用类型字面量来定义。&lt;/p&gt;

&lt;h3 id=&#34;方法集&#34;&gt;方法集&lt;/h3&gt;

&lt;p&gt;一个类型可能会有一个和它相关的方法集合。一个接口类型的方法集就是它的接口。其他的类型&lt;code&gt;T&lt;/code&gt;的方法集是由那些接收者（参见方法定义）为&lt;code&gt;T&lt;/code&gt;的方法组合而成的。指针类型&lt;code&gt;*T&lt;/code&gt;的方法集是由哪些接收者是&lt;code&gt;*T&lt;/code&gt;或者&lt;code&gt;T&lt;/code&gt;的方法组合而成（也就是说它包含了&lt;code&gt;T&lt;/code&gt;的方法集）。&lt;/p&gt;

&lt;h3 id=&#34;boolean&#34;&gt;Boolean&lt;/h3&gt;

&lt;p&gt;布尔类型的声明和操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
var a bool = false
b := true 
c := a == b
c = a != b
c = !a
c = a &amp;amp;&amp;amp; b
c = a || b
```
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;numeric&#34;&gt;Numeric&lt;/h3&gt;

&lt;p&gt;数字类型如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
uint8       the set of all unsigned  8-bit integers (0 to 255)
uint16      the set of all unsigned 16-bit integers (0 to 65535)
uint32      the set of all unsigned 32-bit integers (0 to 4294967295)
uint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)

int8        the set of all signed  8-bit integers (-128 to 127)
int16       the set of all signed 16-bit integers (-32768 to 32767)
int32       the set of all signed 32-bit integers (-2147483648 to 2147483647)
int64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)

float32     the set of all IEEE-754 32-bit floating-point numbers
float64     the set of all IEEE-754 64-bit floating-point numbers

complex64   the set of all complex numbers with float32 real and imaginary parts
complex128  the set of all complex numbers with float64 real and imaginary parts

byte        alias for uint8
rune        alias for int32


uint     either 32 or 64 bits
int      same size as uint
uintptr  an unsigned integer large enough to store the uninterpreted bits of a pointer value
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;变量声明及操作&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
var a int
var b uint16 = 20
var c uint32
c = uint32(b)

var c1 complex64 = 5 + 10i
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;整数支持位运算&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
1 &amp;amp; 1 //按位与
0 &amp;amp; 1 //按位与
1 | 1 //按位或
0 | 1 //按位或
1 ^ 1 //按位异或
1 ^ 0 //按位异或
1&amp;lt;&amp;lt;10 //位左移
2&amp;gt;&amp;gt;1  //位右移
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;配合iota&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
type ByteSize float64
const (
    _ = iota // 通过赋值给空白标识符来忽略值 KB ByteSize = 1&amp;lt;&amp;lt;(10*iota)
    MB
    GB
    TB 
    PB 
    EB 
    ZB 
    YB
)

type BitFlag int
const (
    Active BitFlag = 1 &amp;lt;&amp;lt; iota // 1 &amp;lt;&amp;lt; 0 == 1
    Send // 1 &amp;lt;&amp;lt; 1 == 2
    Receive // 1 &amp;lt;&amp;lt; 2 == 4
)
flag := Active | Send // == 3
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有&lt;code&gt;+ - * / % ++ -- += -= *= /= %=&lt;/code&gt;等常规的数值计算&lt;br /&gt;
还有&lt;code&gt;&amp;gt; &amp;lt; == &amp;gt;= &amp;lt;= !=&lt;/code&gt;等常规数值比较&lt;/p&gt;

&lt;p&gt;另外字符类型可以用int来表示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
var ch int = &#39;\u0041&#39;
var ch2 int = &#39;\u03B2&#39;
var ch3 int = &#39;\U00101234&#39;
fmt.Printf(&amp;quot;%d - %d - %d\n&amp;quot;, ch, ch2, ch3) // integer
fmt.Printf(&amp;quot;%c - %c - %c\n&amp;quot;, ch, ch2, ch3) // character
fmt.Printf(&amp;quot;%X - %X - %X\n&amp;quot;, ch, ch2, ch3) // UTF-8 bytes
fmt.Printf(&amp;quot;%U - %U - %U&amp;quot;, ch, ch2, ch3) // UTF-8 code point
```
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;

&lt;p&gt;字符串由字节序列组成，一旦创建，它的内容就不可改变；它的长度由函数&lt;code&gt;len&lt;/code&gt;获得；字符串里的字节可以用下标访问；不能获取字符串里的字节的地址,&lt;code&gt;&amp;amp;s[i]&lt;/code&gt;是不合法的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变量声明与操作&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
var a string = &amp;quot;hello&amp;quot;
l := len(a)
c := a[0]
s:= &amp;quot;hel&amp;quot; + &amp;quot;lo&amp;quot;
s += &amp;quot; world!&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多的字符串操作可以通过包&lt;code&gt;strings&lt;/code&gt;和&lt;code&gt;strconv&lt;/code&gt;来实现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```
strings.HasPrefix(s, prefix string) bool
strings.HasSuffix(s, prefix string) bool
strings.Contains(s, substr string) bool
strings.Index(s, str string) int
strings.LastIndex(s, str string) int
strings.IndexRune(s string, r, rune) int
strings.Replace(str, old, new, n) string
strings.Count(s, str string) int
strings.Repeat(s, count int) string
strings.ToLower(s) string
strings.ToHigher(s) string
strings.TrimSpace(s string) string
strings.Trim(s string, trim string) string
strings.TrimLeft
strings.TrimRight
strings.Fields(s) []string
strings.Split(s, sep) []string
strings.Join(sl []string, sep string) string
strings.NewReader(s string) Reader

strconv.IntSize()
strconv.Itoa(i int) string
strconv.Atoi(s string) (i int, err error)
strconv.FormatFloat(f float64, fmt byte, prec int, bitsize int) string
strconv.ParseFloat(s string, bitsize int) (f float64, err error)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array&#34;&gt;Array&lt;/h3&gt;

&lt;p&gt;由定长的，单一类型的数据组成的序列；长度由函数&lt;code&gt;len&lt;/code&gt;获得；可以用下标访问数组元素&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[32]byte
[2*N] struct { x, y int32 }
[1000]*float64
[3][5]int
[2][2][2]float64  // same as [2]([2]([2]float64))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;变量声明与操作&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr1 [5]int
var arr2 = new([5]int) (数组是值类型，所以可以用new来创建，获得一个指向[5]int的指针)
var arr3 = [5]int{1,2,3} ==&amp;gt; [1,2,3,0,0]
var arr4 = [...]int{1,2,3} ==&amp;gt; 切片[1,2,3]
var arr5 = [5]string{3:&amp;quot;Chris&amp;quot;, &amp;quot;4&amp;quot;:&amp;quot;Ron&amp;quot;} ==&amp;gt; [&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Chris&amp;quot;,&amp;quot;Ron&amp;quot;]
length := len(arr1)
captis := cap(arr1) (在数组中，len、cap的结果是一样的)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;数组的遍历&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i:= 0; i &amp;lt; len(arr1); i++ {
	arr[i] = ...
}

for i, value := range arr1{
	arr1[i] == value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;多维数组&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var screen [800][600]int

for i:= 0; i&amp;lt;len(screen);i++{
    for j:= 0;j&amp;lt;len(screen[i]);i++{
        fmt.Println(screen[i][j])
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slice&#34;&gt;Slice&lt;/h3&gt;

&lt;p&gt;可以看作一个长度可变的数组；内部应该是由一个数组来实现的（官方文档总是说_an underlying array_）；长度由函数&lt;code&gt;len&lt;/code&gt;获得；可以用下标访问元素；未初始化的slice的值是nil；相比数组多了一个容量的概念，可以由函数&lt;code&gt;cap&lt;/code&gt;获得。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变量的声明&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var identifer []type (初始化之前 identifer 的值是 nil)
var idenrifer []type = arr1[start:end]
var idenrifer []type = arr1[start:]
var idenrifer []type = arr[:end]
var idenrifer []type = arr[:]

var identi []int = []int{1,2,3,4,}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;make&lt;/code&gt;函数创建slice&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t := make([]int， 5) =&amp;gt; [0,0,0,0,0] (cap为5切片，并且切片里的值全部设为int的默认值)
t := make([]int， 3， 5) =&amp;gt; [0,0,0] (cap为5的切片，并且其中的3个设为int的默认值)

注意：
使用 make([]int， 5) 创建的slice，已经被 0 填满。这时使用 append 添加新数据的时候，会加在slice的末尾。
所以如果想用 make 预先分配一些空间出来，需要写成 make([]int, 0, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;切片的复制和追加&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var from = []int{1,2,3}
var to = make([]int, 0)

n := copy(to, from)

to = append(to, 1, 2, 3)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分片通常也是一维的，但是也可以组合出更高维的对象。对于数组的数组来说，内层的数组的长度在构造的时候总是一样的；然而分片的分片(分片的数组)的长度却是可以变化的。此外，内层的分片需要单独创建。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切片和垃圾回收&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;切片的底层指向一个数组，该数组的实际体积可能要大于切片所定义的体积。只有在没有任何切片指向的时候，底层的数组内层才会被释放，这种特性有时会导致程序占用多余的内存。&lt;/p&gt;

&lt;p&gt;示例 函数 FindDigits 将一个文件加载到内存，然后搜索其中所有的数字并返回一个切片。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var digitRegexp = regexp.MustCompile(&amp;quot;[0-9]+&amp;quot;)
func FindDigits(filename string) []byte {
    b, _ := ioutil.ReadFile(filename)
    return digitRegexp.Find(b)
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码可以顺利运行，但返回的 []byte 指向的底层是整个文件的数据。只要该返回的切 片不被释放，垃圾回收器就不能释放整个文件所占用的内存。换句话说，一点点有用的数据 却占用了整个文件的内存。
想要避免这个问题，可以通过拷贝我们需要的部分到一个新的切片中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func FindDigits(filename string) []byte {
   b, _ := ioutil.ReadFile(filename)
   b = digitRegexp.Find(b)
   c := make([]byte, len(b))
   copy(c, b) 
   return c 
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;map&#34;&gt;Map&lt;/h3&gt;

&lt;p&gt;Map是引用类型；未初始化的Map值是nil；长度由函数&lt;code&gt;len&lt;/code&gt;获得；删除元素由函数&lt;code&gt;delete&lt;/code&gt;完成；Map是无序的。&lt;/p&gt;

&lt;p&gt;key的类型必须完整的实现了&lt;code&gt;comparison operators == and !=&lt;/code&gt;, 所以key不能是&lt;code&gt;function, map, or slice&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map[string]int
map[*T]struct{ x, y float64 }
map[string]interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变量的声明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var map1 map[string]string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建map要用&lt;code&gt;make&lt;/code&gt;函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a := make(map[string]int)
b := make(map[string]int， 100)
b := make(map[string][]int， 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map创建后，容量没有限制。&lt;/p&gt;

&lt;h3 id=&#34;struct&#34;&gt;Struct&lt;/h3&gt;

&lt;p&gt;由多个字段组成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// An empty struct.
struct {}

// A struct with 6 fields.
struct {
	x, y int
	u float32
	_ float32  // padding
	A *[]int
	F func()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字段可以匿名&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A struct with four anonymous fields of type T1, *T2, P.T3 and *P.T4
struct {
	T1        // field name is T1
	*T2       // field name is T2
	P.T3      // field name is T3
	*P.T4     // field name is T4
	x, y int  // field names are x and y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以将一个 struct 嵌入到另外一个struct 中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type A struct{
	v int
}
type B struct {
	A
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时可以用 b.v 来访问 a 中的元素，这叫做 promoted。&lt;/p&gt;

&lt;p&gt;一个字段的声明中可以跟着一个可选的字符串标签，它在相应的字段声明中会算做字段的一种属性/性质。这些标签在反射接口和类型一致那里中是可见的，其他的时候可以认为是忽略不计的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 一个用于时间戳协议缓冲区的结构体
// 标签字符串定义了协议缓冲区字段号
import reflect
import fmt

type Tagtest struct {
  microsec  uint64 &amp;quot;field 1&amp;quot;
  serverIP6 uint64 &amp;quot;field 2&amp;quot;
  process   string &amp;quot;field 3&amp;quot;
}

tt := &amp;amp;Tagtest{}
ttType := reflect.TypeOf(tt)
for i:= 0;i&amp;lt;ttType.NumField();i++{
    ixField := ttType.Field(i)
    fmt.Println(ixField.Tag)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;创建结构体&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type A struct {
	a int
}
va := A{a:123}
vb := &amp;amp;A{a:123}
vc := new(A)

func NewA() (a *A) {  //这个是一个很常用的模式
    a = &amp;amp;A{}
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pointer&#34;&gt;Pointer&lt;/h3&gt;

&lt;p&gt;指针不多说，未初始化的指针值是nil。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var p *Point
var pp *[4]int
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;function&#34;&gt;Function&lt;/h3&gt;

&lt;p&gt;描述一类函数的特征，未初始化的函数变量的值是nil。&lt;br /&gt;
在函数的参数/结果列表中，名字（标识符列表）可以都有也可以没有。如果有的话，一个名字代表对应类型的一项（参数/结果），非空名称必须不相同；如果没有，一个类型代表该类型的一项。参数/结果列表通常用小括号括起来，不过当只有一个返回值且没有名字的情况下，这个括号可以省略掉。&lt;br /&gt;
一个函数签名的最后一个参数可能以&amp;hellip;为前缀，这样的函数我们叫可变函数，它们在调用的时候对于那个参数可以传递0或是多个值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func()
func(x int) int
func(a, _ int, z float32) bool
func(a, b int, z float32) (bool)
func(prefix string, values ...int)
func(a, b int, z float64, opt ...interface{}) (success bool)
func(int, int, float64) (float64, *[]int)
func(n int) func(p *T)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;interface&#34;&gt;Interface&lt;/h3&gt;

&lt;p&gt;接口类型定义了一个方法组。接口类型的变量可以存放任何实现了这个方法组的类型的值。未初始化的接口类型值为 nil。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A simple File interface
interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
	Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;特殊的接口类型&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何类型都实现了空接口&lt;/p&gt;

&lt;h3 id=&#34;channel&#34;&gt;Channel&lt;/h3&gt;

&lt;p&gt;管道用来实现并发编程中的通信。为初始化的管道的值是nil。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chan T          // can be used to send and receive values of type T
chan&amp;lt;- float64  // can only be used to send float64s
&amp;lt;-chan int      // can only be used to receive ints
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初始化管道要用函数&lt;code&gt;make&lt;/code&gt;
用内建函数 &lt;code&gt;close()&lt;/code&gt; 来关闭一个管道&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;channel := make(chan int, 100)
channel &amp;lt;- 3 (向管道内放一个数字)
v1 := &amp;lt;-channel （从管道接收一个数字）
var x, ok = &amp;lt;-channel
close(channel)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;发送消息会阻塞&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Communication blocks until the send can proceed. A send on an unbuffered channel can proceed if a receiver is ready. A send on a buffered channel can proceed if there is room in the buffer. A send on a closed channel proceeds by causing a run-time panic. A send on a nil channel blocks forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;接收消息会阻塞&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The expression blocks until a value is available. Receiving from a nil channel blocks forever. A receive operation on a closed channel can always proceed immediately, yielding the element type&amp;rsquo;s zero value after any previously sent values have been received.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;处理阻塞&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以用 select 来处理阻塞&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//无阻塞的接收
select {
    case msg := &amp;lt;-messages:
        fmt.Println(&amp;quot;received message&amp;quot;, msg)
    default:
        fmt.Println(&amp;quot;no message received&amp;quot;)
    }
    
//无阻塞的发送
select {
    case messages &amp;lt;- msg:
        fmt.Println(&amp;quot;sent message&amp;quot;, msg)
    default:
        fmt.Println(&amp;quot;no message sent&amp;quot;)
    }
    
//同时处理多个管道    
select {
    case msg := &amp;lt;-messages:
        fmt.Println(&amp;quot;received message&amp;quot;, msg)
    case sig := &amp;lt;-signals:
        fmt.Println(&amp;quot;received signal&amp;quot;, sig)
    default:
        fmt.Println(&amp;quot;no activity&amp;quot;)
    }

//超时处理    
select {
    case msg := &amp;lt;-messages:
        fmt.Println(&amp;quot;received message&amp;quot;, msg)
    case sig := &amp;lt;-signals:
        fmt.Println(&amp;quot;received signal&amp;quot;, sig)
    default time.After(time.Second * 3):
        fmt.Println(&amp;quot;no activity&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;自定义类型&#34;&gt;自定义类型&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;type&lt;/code&gt;来自定义类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type IntArray [16]int

type (
	Point struct{ x, y float64 }
	Polar Point
)

type TreeNode struct {
	left, right *TreeNode
	value *Comparable
}

type Block interface {
	BlockSize() int
	Encrypt(src, dst []byte)
	Decrypt(src, dst []byte)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用swarm在mac上搭建开发环境</title>
      <link>https://asdfsx.github.io/post/docker/%E4%BD%BF%E7%94%A8swarm%E5%9C%A8mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 18 Feb 2017 10:12:39 +0800</pubDate>
      
      <guid>https://asdfsx.github.io/post/docker/%E4%BD%BF%E7%94%A8swarm%E5%9C%A8mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>

&lt;h1 id=&#34;源起&#34;&gt;源起&lt;/h1&gt;

&lt;p&gt;docker并不是新技术。作为 golang 社区内的旗舰级的项目，从诞生之初就吸引了很多人的瞩目，甚至可以说是获得了所有 golang 社区的人多瞩目吧。同时对推广 golang 也起了很大的作用。作为从一直关注着 golang 的人，大概2年前就开始尝试使用它了。不过由于其依赖 linux 的多项特性，导致在 mac 上使用必须要借助虚拟机，体验总是要差一点。最近经人提醒发现新的 docker for mac 可以不借助虚拟机就可以在 mac 上提供与 linux 上同样的体验，大喜！遂卸载虚拟机，打算用新软件搭个测试环境玩耍一下。&lt;/p&gt;

&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;p&gt;超级简单，照着说明来就好。顺便装上了 kitematic。这个确实也非常好用。&lt;/p&gt;

&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;

&lt;p&gt;将一套以前用 python 实现的 kafka producer程序，移植到 golang 上。测试新程序的异常情况处理（特指连接失败的处理）。
然后就被坑掉了。&lt;/p&gt;

&lt;h1 id=&#34;坑1-网络的问题&#34;&gt;坑1 网络的问题&lt;/h1&gt;

&lt;p&gt;最初只是想通过 docker 启动一个单点的 kafka，程序通过本地网络直接访问就可以了。通过之前安装的 kitematic 从 hub.docker.com 上下载了 spotify/kafka 镜像，并直接启动容器。通过kitematic连接到容器内，各项命令执行正常。但是执行程序的时候却发现，总是第一次连接成功后，后边的所有连接都是失败的。通过日志发现程序在第一次成功连接 kafka 之后，连接地址发生了变更，变成了容器内部的地址（直观的现象就是，端口从 kitematic 随机生成的 12345 变成了 9092）。然后又尝试了手动用 &amp;ndash;net=host 方式启动，结果彻底连不上了。&lt;/p&gt;

&lt;p&gt;在对 github.com/shopify/sarama 简单的分析以后，发现它的连接过程是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首次连接，根据配置信息连接服务器&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;连接成功后，从服务器获取broker信息&lt;/li&gt;
&lt;li&gt;根据获得到的broker信息，连接其余的broker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;问题就出现在最后一步上，服务器返回的broker信息中，网络地址都是容器内部的网络，没有办法从容器网络外部直接连接的。&lt;/p&gt;

&lt;p&gt;通过在github上查 issue， google 上查资料，有了以下不负责任的猜想：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;目前的 docker for mac 使用了自己搞的 github.com/docker/hyperkit 来实现轻量级的虚拟化。从项目的说明可以看到，其基于 github.com/mist64/xhyve，借助了 mac os 自身的 hypervisor.framework 来实现虚拟化。在 developer.apple.com 上可以看到相关的说明和 api refrence。它是 OS X v10.10 新增的一个功能，从 api 上来看，可以实现对 cpu 和 mem 的简单控制
，并没有提供对网络的控制。网络这块是 xhyve 自己通过 virto-net 实现的。这可能也是导致网络这块体验比较差的原因吧。完善网络还需要花不少时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;测试还是要继续，从外部连接容器网络有问题，那就把测试程序也放到容器环境中去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;上SWARM吧，骚年！&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;用swarm解决网络问题&#34;&gt;用SWARM解决网络问题&lt;/h1&gt;

&lt;p&gt;业界已有很多容器集群方案：kubernetes、mesos、swarm等。各有优势，选择swarm，主要原因还是方便，直接与docker集成。顺便吐槽，容器的江湖也是乱啊！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下载测试用到的镜像&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  docker pull nginx
  docker pull spotify/kafka:latest
  docker pull prom/busybox:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在本地创建swarm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  docker swarm init
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;创建 overlay 网络&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  docker network  create \
    --driver overlay \
    --subnet 10.0.9.0/24 \
    --opt encrypted \
    my-network
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单测试一下 overlay 网络，以及swarm中的服务发现&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;启动一个 nginx 服务，并挂到 overlay 网络上&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker service create \
  --replicas 1 \
  --name my-web \
  --network my-network \
  nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;检查服务&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker service ps my-web
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;检查网络&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker network inspect my-network
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用busybox检查服务发现，其实就是网络中的dns&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker service create \
  --name dnstest \
  --network my-network \
  busybox \
  sleep 3000
  
docker service ps dnstest

docker exec -it dnstest.1.k8pjka8c9ikrpeje6spm6z8b5 sh

nslookup my-web
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;启动 kafka 服务&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  docker service create \
    --name kafka \
    --network my-network \
    spotify/kafka:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试 kafka
用测试 my-web 的方法测试 kafka&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关闭服务&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  docker service rm my-web
  docker service rm kafka
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;测试程序打包&#34;&gt;测试程序打包&lt;/h1&gt;

&lt;p&gt;golang 支持交叉编译，也就是说我在 mac 上就可以直接编译出 linux 上可以使用的可执行程序。这真是极大的方便了开发人员。只需要&lt;code&gt;GOOS=linux GOARCH=amd64 go build ${LDFLAGS} ${PACKAGE}&lt;/code&gt;就可以获得需要的可执行程序。然后简单的打包到镜像中就可以了。然后如愿以偿的掉入&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;坑2-时区的问题&#34;&gt;坑2 时区的问题&lt;/h1&gt;

&lt;p&gt;鉴于 golang 的可执行文件只是依赖 glibc，打包时选择了官方busybox作为基础镜像，好处就是小！小到连时区的支持都缩减到只有 UTC 一个，然后程序执行的时候就悲剧了。找到了最简单的一个解决办法是，设置环境变量&lt;code&gt;TZ&lt;/code&gt;，设为&lt;code&gt;CST-8&lt;/code&gt;表示中国标准时间，设为&lt;code&gt;JST-9&lt;/code&gt;表示日本标准时间。这个对于 date 命令很好使，但是对于编译好的 golang 程序顶个球用。只能选择另外一个办法，换一个带时区支持的 &lt;code&gt;prom/busybox&lt;/code&gt; 镜像，然后在Dockerfile中增加一个命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN mv /etc/localtime /etc/localtime.bak &amp;amp;&amp;amp; \
    ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;时区问题搞定，测试顺利进行&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang代码组织结构</title>
      <link>https://asdfsx.github.io/post/golang/Golang%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 11 Dec 2016 00:03:11 +0800</pubDate>
      
      <guid>https://asdfsx.github.io/post/golang/Golang%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</guid>
      <description>

&lt;p&gt;结合官方的文档，还有《The way to go》先来熟悉一下golang的代码结构。以下来自官方文档&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Go programs are constructed by linking together packages. A package in turn is constructed from one or more source files that together declare constants, types, variables and functions belonging to the package and which are accessible in all files of the same package. Those elements may be exported and used in another package.

Each source file consists of a package clause defining the package to which it belongs, followed by a possibly empty set of import declarations that declare packages whose contents it wishes to use, followed by a possibly empty set of declarations of functions, types, variables, and constants.

A package clause begins each source file and defines the package to which the file belongs.

A set of files sharing the same PackageName form the implementation of a package. An implementation may require that all source files for a package inhabit the same directory.

Within a package, package-level variables are initialized in declaration order but after any of the variables they depend on.

Variables may also be initialized using functions named init declared in the package block, with no arguments and no result parameters.

A complete program is created by linking a single, unimported package called the main package with all the packages it imports, transitively. The main package must have package name main and declare a function main that takes no arguments and returns no value.

Program execution begins by initializing the main package and then invoking the function main. When that function invocation returns, the program exits. It does not wait for other (non-main) goroutines to complete.

......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单概括一下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;golang的项目有多个包组成&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每个包由多个文件组成&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每个文件包含几部分：必须有的package声明，可能存在的import声明，可能存在的常量、类型、全局变量、函数等的声明&lt;/li&gt;
&lt;li&gt;同一个包内的文件使用同一个package名称&lt;/li&gt;
&lt;li&gt;同一个包内的文件要在同一个目录下&lt;/li&gt;
&lt;li&gt;在包中，包级别的变量会按照声明顺序初始化&lt;/li&gt;
&lt;li&gt;变量也可以由init函数来初始化，init含税可能会有多个&lt;/li&gt;
&lt;li&gt;整个程序是由&lt;code&gt;main&lt;/code&gt;包创建的，这个包必须包含一个叫做&lt;code&gt;main&lt;/code&gt;的函数&lt;/li&gt;
&lt;li&gt;程序执行是，先初始化&lt;code&gt;main&lt;/code&gt;包，然后执行&lt;code&gt;main&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果要再简单直白一点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个包就是一个目录，包名就是目录名（其实一个目录下是可以有多个包存在的，用前边这种方式可以让代码结构简单明了）&lt;/li&gt;
&lt;li&gt;目录下存放该包里的所有文件&lt;/li&gt;
&lt;li&gt;每个包中可以有多个init函数，该函数会在import包时被自动调用&lt;/li&gt;
&lt;li&gt;整个程序的入口为一个&lt;code&gt;main&lt;/code&gt;函数，该函数没有参数，没有返回值，属于一个不被引用的包&lt;code&gt;main&lt;/code&gt;包。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也可以用一张图来概括
&lt;img src=&#34;http://ohrdj7osp.bkt.clouddn.com/20150416173122272.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;补充&#34;&gt;补充&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;init函数的一个常见用途是包的初始化和注册&lt;br /&gt;
举例：mozilla的heka项目，有多个插件组成，每个插件都是一个独立的包，插件的初始化和注册都是由包中的init函数来实现的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为一个python程序员，有没有想到那个&lt;code&gt;__init__.py&lt;/code&gt;?不过这个init函数不是必须的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;同一个目录里如果有多个main函数，不能简单的使用&lt;code&gt;go build&lt;/code&gt;来编译，会提示一个main函数被重复定义，只能一个一个文件来build。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;抄个例子：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

// Send the sequence 2, 3, 4, … to channel &#39;ch&#39;.
func generate(ch chan&amp;lt;- int) {
	for i := 2; ; i++ {
		ch &amp;lt;- i  // Send &#39;i&#39; to channel &#39;ch&#39;.
	}
}

// Copy the values from channel &#39;src&#39; to channel &#39;dst&#39;,
// removing those divisible by &#39;prime&#39;.
func filter(src &amp;lt;-chan int, dst chan&amp;lt;- int, prime int) {
	for i := range src {  // Loop over values received from &#39;src&#39;.
		if i%prime != 0 {
			dst &amp;lt;- i  // Send &#39;i&#39; to channel &#39;dst&#39;.
		}
	}
}

// The prime sieve: Daisy-chain filter processes together.
func sieve() {
	ch := make(chan int)  // Create a new channel.
	go generate(ch)       // Start generate() as a subprocess.
	for {
		prime := &amp;lt;-ch
		fmt.Print(prime, &amp;quot;\n&amp;quot;)
		ch1 := make(chan int)
		go filter(ch, ch1, prime)
		ch = ch1
	}
}

func main() {
	sieve()
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Golang开发环境设置</title>
      <link>https://asdfsx.github.io/post/golang/Golang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sat, 10 Dec 2016 16:45:16 +0800</pubDate>
      
      <guid>https://asdfsx.github.io/post/golang/Golang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid>
      <description>

&lt;h2 id=&#34;开发环境的设置&#34;&gt;开发环境的设置&lt;/h2&gt;

&lt;p&gt;老调重提，先搞定使用环境再说怎么用&lt;br /&gt;
关于安装，下载最新版的golang安装包，安装就好。这里重点说说环境变量的配置，摘抄一段《The way to go》里的一段&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GOROOT 
表示 Go 在你的电脑上的安装位置，它的值一般都是 $HOME/go ，
当然，你也可以安装在别的地方。  

$GOARCH 
表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。

$GOOS 
表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。 

$GOBIN 
表示编译器和链接器的安装位置，默认是 $GOROOT/bin ，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默 认值。  

目标机器是指你打算运行你的 Go 应用程序的机器。  

Go 编译器支持交叉编译，也就是说你可以在一台机器上构建运行在具有不同操作系统和处理 器架构上运行的应用程序，也就是说编写源代码的机器可以和目标机器有完全不同的特性 (操作系统与处理器架构)。
为了区分本地机器和目标机器，你可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置目标机器的参 数，这两个变量只有在进行交叉编译的时候才会用到，如果你不进行显示设置，他们的值会 和本地机器( $GOOS 和 $GOARCH )一样。

$GOPATH 
默认采用和 $GOROOT 一样的值，但从 Go 1.1 版本开始，你必须修改为其它 路径。它可以包含多个包含 Go 语言源码文件、包文件和可执行文件的路径，而这些路径 下又必须分别包含三个规定的目录: src 、 pkg 和 bin ，这三个目录分别用于存放源 码文件、包文件和可执行文件。

$GOARM 
专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。

$GOMAXPROCS 
用于设置应用程序可使用的处理器个数与核数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中最常用的就是&lt;code&gt;GOPATH&lt;/code&gt;。你可以只设置一个GOPATH，然后把所有的项目都放在这个目录下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.bash_profile
export GOPATH=/root/gocode
EOF 

source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依赖管理工具&#34;&gt;依赖管理工具&lt;/h2&gt;

&lt;p&gt;golang诞生之初，没有考虑依赖的管理，编译时候对于本地没有的包默认下载最新的。导致了一些依赖冲突的问题。于是社区里的人搞了各种工具来进行依赖管理，比如godep。&lt;/p&gt;

&lt;p&gt;到了golang 1.5以后，官方借鉴了社区已有的一些做法，将依赖管理集成到了golang中，即所谓的&lt;code&gt;vendor&lt;/code&gt;。然后其余的工具纷纷升级，提供对官方依赖管理的支持。&lt;/p&gt;

&lt;p&gt;但是貌似官方还是没有提供一个管理工具，所以想用好依赖管理，还是要借助一些第三方的工具，比如：godep，glide(新发现的)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;对比rust，这点golang做的要差些。rust官方提供项目管理工具cargo，可以实现项目的create、build、test、依赖管理，一站式服务实在人人爱。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;项目编译&#34;&gt;项目编译&lt;/h2&gt;

&lt;p&gt;格式化代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go fmt *.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go build 
编译项目，如果有可执行文件，生成到当前目录

go install 
编译项目，如果有可执行文件，生成到$GOPATH/bin下
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行单元测试&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载一个golang的项目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开发环境大概就是这样，接下来熟悉一下golang的基本结构。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang重新从零开始之旅</title>
      <link>https://asdfsx.github.io/post/golang/Golang%E9%87%8D%E6%96%B0%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B9%8B%E6%97%85/</link>
      <pubDate>Fri, 09 Dec 2016 19:20:36 +0800</pubDate>
      
      <guid>https://asdfsx.github.io/post/golang/Golang%E9%87%8D%E6%96%B0%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B9%8B%E6%97%85/</guid>
      <description>&lt;p&gt;第一次接触golang还是在4年前？当时的版本大概是0.9？&lt;/p&gt;

&lt;p&gt;当时刚用python完成了一个ETL的项目。为了压榨机器的性能，python多进程是必不可少的。于是再一次被多进程搞得痛不欲生，内存的浪费（每个进程都要加载相同的数据），多进程之间的协同（硬是塞了多个队列到各个进程里），还有时不时出现的僵尸进程。虽然我仍然十分喜欢python，但是这些始终解决不了的问题，让我生出了寻找一个替代品的想法。&lt;/p&gt;

&lt;p&gt;最初是打算使用erlang的。其实当时接触erlang有一阵子了，对于erlang的语法什么的也算比较熟。但是最后还是放弃了，原因就是对于语言的偏好吧：对于一个习惯了python中简单方便的使用list、map进行各种组合的人来说，erlang的数据结构用起来太麻烦了；另外就是感觉erlang的社区有一种很封闭的感觉？提到erlang，多说一句，这确实是个很好的语言，有很多非常好的特性，但是始终非常小众，原因我不认为是什么函数式语法的问题，更多的问题我觉得是社区吧。&lt;/p&gt;

&lt;p&gt;在使用erlang重新实现了一部分python的功能模块之后，我终于放弃了蛋疼的一个个把python的map改成erlang的proplists，放弃了一个个把python中的for循环改成erlang中的尾递归。这个时候我遇到了golang。&lt;/p&gt;

&lt;p&gt;最初如何发现golang的已经记不清了。随着了解的加深，对这门语法简单、性能不错，并发容易实现的语言，产生了很强的好感。随着golang社区的重磅项目陆续诞生，甚至认为可以在分布式计算领域诞生一个可以替代hadoop的项目。不过目前来看社区的主要发展方向好像还是基础设施的建设上，重磅的项目还是主要集中在容器、集群管理、监控这个方向。虽然对这个语言很有好感，但是可惜的是还是没有用起来。只是还持续的关注着golang和golang的社区。&lt;/p&gt;

&lt;p&gt;最近开始看rust，想着把golang也重新拿来把玩一番，于是有了这堆牢骚。多余的不说，只是希望能把golang重新熟悉一下。顺便熟悉熟悉用&lt;code&gt;hugo&lt;/code&gt;搭blog，熟悉熟悉markdown，熟悉熟悉whatever。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>